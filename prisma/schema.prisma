generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  firstName      String?
  lastName       String?
  phone          String?
  location       String?
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  companyLogo    String?
  companyName    String?
  orgNumber      String?
  role           String          @default("customer")
  website        String?
  listings       Listing[]
  bids           Bid[]
  flightBookings FlightBooking[]
  payments       Payment[]
  subscription   Subscription?
  accounts       Account[]
  sessions       Session[]
  // Relasjoner for meldinger/vurderinger
  conversationsAsBuyer  Conversation[] @relation("BuyerConversations")
  conversationsAsSeller Conversation[] @relation("SellerConversations")
  messages              Message[]
  reviewsWritten        Review[]       @relation("ReviewsWritten")
  reviewsReceived       Review[]       @relation("ReviewsReceived")
  reportsReported       Report[]       @relation("ReportsByUser")
  reportsHandled        Report[]       @relation("ReportsHandledBy")
  favorites             Favorite[]
  savedSearches         SavedSearch[]
  auditLogs             AuditLog[]
  // Fort gjort relasjoner
  secureOrdersBuyer     SecureOrder[]  @relation("SecureOrdersBuyer")
  secureOrdersSeller    SecureOrder[]  @relation("SecureOrdersSeller")
  orderDisputesInitiated OrderDispute[] @relation("OrderDisputesInitiated")
  orderDisputesResolved  OrderDispute[] @relation("OrderDisputesResolved")
  orderStatusUpdates     OrderStatusHistory[] @relation("OrderStatusUpdates")
  sellerStripeAccount    SellerStripeAccount? @relation("SellerStripeAccount")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  listings    Listing[]

  @@map("categories")
}

model Listing {
  id                 String           @id @default(cuid())
  shortCode          String?          @unique
  title              String
  description        String           @db.Text
  price              Decimal          @db.Decimal(10, 2)
  location           String
  showAddress        Boolean          @default(false)
  status             ListingStatus    @default(PENDING)
  isActive           Boolean          @default(true)
  views              Int              @default(0)
  isFeatured         Boolean          @default(false)
  contactEmail       String?
  contactPhone       String?
  contactName        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  publishedAt        DateTime?
  expiresAt          DateTime?
  soldAt             DateTime?
  userId             String
  categoryId         String
  condition          String?
  listingType        ListingType      @default(FIXED_PRICE)
  mileage            Int?
  registrationNumber String?
  reservePrice       Decimal?         @db.Decimal(10, 2)
  suggestedPrice     Decimal?         @db.Decimal(10, 2)
  enableFortGjort    Boolean          @default(false)
  
  // Eiendom-spesifikke felt
  propertyPurpose    PropertyPurpose? @default(SALE) // Salg eller utleie
  rentalPrice        Decimal?         @db.Decimal(10, 2) // Månedlig leie
  deposit            Decimal?         @db.Decimal(10, 2) // Depositum
  availableFrom      DateTime?        // Tilgjengelig fra dato
  rentIncludes       String?          @db.Text // Hva som inngår i leien
  
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category           Category         @relation(fields: [categoryId], references: [id])
  images             Image[]
  vehicleSpec        VehicleSpec?
  propertySpec       PropertySpec?
  priceEstimation    PriceEstimation?
  auction            Auction?
  bids               Bid[]
  listingPayment     ListingPayment?
  // Relasjoner for meldinger/rapporter/vurderinger
  conversations      Conversation[]
  reports            Report[]
  reviews            Review[]
  favorites          Favorite[]
  // Fort gjort
  secureOrders       SecureOrder[]

  @@index([categoryId], map: "listings_categoryId_fkey")
  @@index([userId], map: "listings_userId_fkey")
  @@index([categoryId, status, isActive, expiresAt])
  @@index([status, isActive, expiresAt])
  @@index([propertyPurpose])
  @@fulltext([title])
  @@map("listings")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId], map: "images_listingId_fkey")
  @@map("images")
}

model PriceEstimation {
  id             String           @id @default(cuid())
  listingId      String           @unique
  make           String?
  model          String?
  year           Int?
  fuelType       String?
  transmission   String?
  estimatedPrice Decimal?         @db.Decimal(10, 2)
  priceRange     String?          @db.LongText
  method         EstimationMethod
  confidence     String
  factors        String?          @db.LongText
  disclaimer     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("price_estimations")
}

model Auction {
  id             String        @id @default(cuid())
  listingId      String        @unique
  startTime      DateTime      @default(now())
  endTime        DateTime
  reservePrice   Decimal?      @db.Decimal(10, 2)
  currentHighBid Decimal?      @db.Decimal(10, 2)
  status         AuctionStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  listing        Listing       @relation(fields: [listingId], references: [id])
  bids           Bid[]

  @@map("auctions")
}

model Bid {
  id        String    @id @default(cuid())
  auctionId String
  listingId String
  bidderId  String
  amount    Decimal   @db.Decimal(10, 2)
  message   String?
  status    BidStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auction   Auction   @relation(fields: [auctionId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])
  bidder    User      @relation(fields: [bidderId], references: [id])

  @@index([auctionId, amount])
  @@index([listingId])
  @@index([bidderId])
  @@map("bids")
}

model VehicleSpec {
  id                 String    @id @default(cuid())
  registrationNumber String?
  make               String?
  model              String?
  variant            String?
  year               Int?
  fuelType           String?
  transmission       String?
  color              String?
  power              Int?
  co2Emission        Int?
  mileage            Int?
  nextInspection     DateTime?
  insurance          String?
  accidents          Boolean?
  serviceHistory     String?   @db.Text
  modifications      String?   @db.Text
  additionalEquipment Json?
  
  // Utvidede Vegvesen-felt for full spesifikasjon
  bodyType           String?   // Karosseri (Sedan, SUV, osv)
  engineSize         Float?    // Slagvolum i liter
  cylinderCount      Int?      // Antall sylindre
  maxSpeed           Int?      // Toppfart km/t
  length             Int?      // Lengde i cm
  width              Int?      // Bredde i cm
  height             Int?      // Høyde i cm
  weight             Int?      // Egenvekt i kg
  maxWeight          Int?      // Totalvekt i kg
  payload            Int?      // Nyttelast i kg
  roofLoad           Int?      // Taklast i kg
  trailerWeightBraked    Int?  // Tilhengervekt med brems i kg
  trailerWeightUnbraked  Int?  // Tilhengervekt uten brems i kg
  seats              Int?      // Antall seter
  frontSeats         Int?      // Antall forseter
  doors              Int?      // Antall dører
  trunkCapacity      Int?      // Bagasjerom i liter
  euroClass          String?   // Euro-klasse (Euro 5, Euro 6, osv)
  wheelDrive         String?   // Hjuldrift (Forhjul, Bakhjul, Firehjul)
  vin                String?   // Chassis nummer
  firstRegistrationDate DateTime? // 1. gang registrert
  lastInspection     DateTime? // Sist EU-godkjent
  registrationStatus String?   // Status i motorvognregisteret
  vehicleGroup       String?   // Kjøretøygruppe
  technicalCode      String?   // Teknisk kode
  remarks            Json?     // Merknader fra Vegvesen som array
  
  // Drivstoff-forbruk
  fuelConsumptionCombined Float? // Blandet kjøring L/100km
  fuelConsumptionCity     Float? // Bykjøring L/100km  
  fuelConsumptionHighway  Float? // Landeveiskjøring L/100km
  
  // Dekk og felg
  tireSpecs          Json?     // Dekk-spesifikasjoner som JSON array
  
  // Sikkerhet
  abs                Boolean?  // ABS
  airbags            Boolean?  // Airbags

  // Omregistreringsavgift (fra Skatteetaten)
  omregistreringsavgift    Int?      // Beløp i hele kroner
  omregAvgiftDato          DateTime? // Dato avgiften gjelder for
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  listingId          String    @unique
  listing            Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("vehicle_specs")
}

// ================== EIENDOM ==================

model PropertySpec {
  id            String   @id @default(cuid())
  listingId     String   @unique
  
  // === MATRIKKELDATA (fra Kartverket) ===
  municipalityNumber String?  // 301 (Oslo)
  municipalityName   String?  // Oslo kommune
  propertyNumber     String?  // 229 (gårdsnr)
  leaseNumber        String?  // 107 (bruksnr)
  unitNumber         String?  // Seksjonsnummer (for sameier)
  matrikkelId        String?  // Unik matrikkel-ID fra Kartverket
  cadastralNumber    String?  // Matrikkelenhet fullstendig (301-229/107)
  
  // === GRUNNLEGGENDE EIENDOMSINFO ===
  propertyType       PropertyType?     // Leilighet, Enebolig, Rekkehus, etc.
  ownershipType      OwnershipType?    // Selveier, Aksje, Borettslag, Andel, Leie
  buildingYear       Int?              // Byggeår
  condition          PropertyCondition? // A-E tilstand
  renovationYear     Int?              // År for større renovering
  
  // === OFFISIELL ADRESSE (fra Kartverket) ===
  officialAddress    String?  // Komplett adresse fra matrikkelen
  streetName         String?  // Gatenavn
  houseNumber        String?  // Husnummer (kan være 12A, 45-47)
  apartmentNumber    String?  // Leilighetsnummer (H0201, 0301)
  postalCode         String?  // Postnummer
  city               String?  // Poststed
  county             String?  // Fylke
  
  // === AREAL OG STØRRELSE (m²) ===
  // Fra matrikkeldata
  propertyArea       Int?     // Totalt eiendomsareal/tomteareal
  usableAreaInternal Int?     // BRA-i (bruksareal internt)
  usableAreaExternal Int?     // BRA-e (bruksareal eksternt: bod, garasje) 
  totalUsableArea    Int?     // Total BRA (BRA-i + BRA-e)
  builtArea          Int?     // Bebygd areal (BYA)
  balconyTerraceArea Int?     // TBA (terrasse/balkong areal)
  plotSize           Int?     // Tomteareal for eneboliger
  livingArea         Int?     // P-ROM (primærrom - boareal)
  garageArea         Int?     // Garasjeareal
  storageArea        Int?     // Lager/bod areal
  basementArea       Int?     // Kjeller areal
  atticArea          Int?     // Loft areal
  
  // === ROM OG LAYOUT ===
  rooms              Int?     // Antall rom totalt
  bedrooms           Int?     // Antall soverom
  bathrooms          Int?     // Antall bad/dusjrom
  separateToilets    Int?     // Antall separate toaletter
  floor              String?  // Etasje (eks. "5", "U1", "1-2", "Kj")
  totalFloors        Int?     // Antall etasjer i bygget
  entranceFloor      String?  // Inngangsadresse etasje
  
  // === ENERGI OG TEKNISK ===
  energyRating       EnergyRating?     // A-G energimerking
  energyColor        String?           // Fargekode (mørkegrønn, grønn, etc.)
  heatingType        HeatingType?      // Fjernvarme, Elektrisk, Varmepumpe
  heatingSource      String?           // Hovedoppvarming detaljer
  ventilationType    VentilationType?  // Naturlig, Balansert, Avtrekk
  waterHeating       WaterHeatingType? // Fjernvarme, Elektrisk, Varmepumpe
  
  // === FELLESSKAP (borettslag/sameie) ===
  housingAssociation String?  // Navn på borettslag/sameie
  organizationNumber String?  // Organisasjonsnummer
  monthlyFee         Decimal? @db.Decimal(10, 2) // Felleskost kr/mnd
  sharedDebt         Decimal? @db.Decimal(10, 2) // Fellesgjeld kr
  sharedAssets       Decimal? @db.Decimal(10, 2) // Fellesformue kr
  maxLoan            Decimal? @db.Decimal(10, 2) // Maks lånebeløp
  equityRequired     Decimal? @db.Decimal(10, 2) // Krav til egenkapital
  
  // === BYGNINGSDETALJER ===
  buildingMaterial   BuildingMaterial? // Tre, Betong, Mur, Stål
  roofType           RoofType?        // Skifer, Tegl, Blikk, Papp
  foundationType     FoundationType?  // Betong, Naturstein, Pilarer
  wallType           WallType?        // Tømmer, Mur, Betong
  insulation         InsulationType?  // Mineralull, Cellulosa, EPS
  windows            WindowType?      // Tre, Aluminium, Plast
  
  // === UTSTYR OG FASILITETER ===
  // Uteplasser
  hasBalcony         Boolean? @default(false)
  hasTerrace         Boolean? @default(false)
  hasGarden          Boolean? @default(false)
  gardenSize         Int?     // Hagestørrelse m²
  hasRoof            Boolean? @default(false) // Takterrasse
  
  // Parkering
  hasParking         Boolean? @default(false)
  parkingType        ParkingType?     // Garasje, Carport, Gateparkering
  parkingSpaces      Int?             // Antall parkeringsplasser
  
  // Bygningsfasiliteter
  hasElevator        Boolean? @default(false)
  hasBasement        Boolean? @default(false)
  hasAttic           Boolean? @default(false)
  hasFireplace       Boolean? @default(false)
  hasAirConditioning Boolean? @default(false)
  hasAlarm           Boolean? @default(false)
  
  // Tekniske installasjoner
  fiberInternet      Boolean? @default(false)
  cableTV            Boolean? @default(false)
  dishwasher         Boolean? @default(false)
  washingMachine     Boolean? @default(false)
  dryer              Boolean? @default(false)
  
  // === FELLESTJENESTER ===
  sharedLaundry      Boolean? @default(false)
  sharedSauna        Boolean? @default(false)
  sharedGym          Boolean? @default(false)
  sharedBikeRoom     Boolean? @default(false)
  janitorService     Boolean? @default(false)
  
  // === KJØKKEN ===
  kitchenType        KitchenType?     // Åpent, Separat, Kjøkkenkrok
  kitchenEquipped    Boolean? @default(false)
  stove              StoveType?       // Elektrisk, Gass, Induksjon
  oven               Boolean? @default(false)
  refrigerator       Boolean? @default(false)
  freezer            Boolean? @default(false)
  
  // === BAD/TOALETT ===
  bathroomType       BathroomType?    // Helstøpt bad, Flislagt, etc.
  hasShower          Boolean? @default(false)
  hasBathtub         Boolean? @default(false)
  floorHeating       Boolean? @default(false)
  
  // === SÆRLIGE FORHOLD ===
  petsAllowed        Boolean? @default(true)
  smokingAllowed     Boolean? @default(false)
  studentFriendly    Boolean? @default(false)
  seniorFriendly     Boolean? @default(false)
  wheelchairAccess   Boolean? @default(false)
  noiseLevel         NoiseLevel?      // Stille, Moderat, Høy
  
  // === UTLEIE-SPESIFIKKE FELT ===
  furnished          Boolean? @default(false)
  furnishingLevel    FurnishingLevel? // Umøblert, Delvis, Fullt
  shortTermRental    Boolean? @default(false)
  minimumRentalPeriod Int?            // Måneder
  utilitiesIncluded  Boolean? @default(false)
  internetIncluded   Boolean? @default(false)
  cleaningIncluded   Boolean? @default(false)
  
  // === INTERNASJONALE FELT ===
  // For utenlandske eiendomsmeglere
  foreignAddress     String?  @db.Text // Adresse i utenlandsk format
  foreignCountry     String?  // Land
  foreignRegion      String?  // Region/provins/stat
  foreignPostalCode  String?  // Postkode (kan være alfanumerisk)
  foreignCurrency    String?  // Valuta for priser (EUR, USD, SEK)
  translatedTitle    String?  // Oversatt tittel
  translatedDesc     String?  @db.Text // Oversatt beskrivelse
  
  // === GEOGRAFISKE DATA ===
  latitude           Float?   // Breddegrad (WGS84)
  longitude          Float?   // Lengdegrad (WGS84)
  propertyBoundary   Json?    // GeoJSON polygon av eiendomsgrenser
  elevation          Int?     // Høyde over havet (moh)
  seaView            Boolean? @default(false)
  mountainView       Boolean? @default(false)
  forestView         Boolean? @default(false)
  cityView           Boolean? @default(false)
  
  // === NÆROMGIVELSER ===
  distanceToCenter   Int?     // Avstand til sentrum (meter)
  distanceToSchool   Int?     // Avstand til skole (meter)
  distanceToStore    Int?     // Avstand til butikk (meter)
  publicTransport    String?  // Kollektivtilbud beskrivelse
  
  // === ØKONOMI OG KOSTNADER ===
  propertyTax        Decimal? @db.Decimal(10, 2) // Eiendomsskatt årlig
  municipalFee       Decimal? @db.Decimal(10, 2) // Kommunale avgifter
  waterSewer         Decimal? @db.Decimal(10, 2) // Vann/avløp årlig
  garbageCollection  Decimal? @db.Decimal(10, 2) // Renovasjon årlig
  insurance          Decimal? @db.Decimal(10, 2) // Forsikring årlig
  heatingCost        Decimal? @db.Decimal(10, 2) // Oppvarmingskostnad årlig
  electricityCost    Decimal? @db.Decimal(10, 2) // Strømkostnad årlig
  
  // === JURIDISKE FORHOLD ===
  registeredOwner    String?  // Registrert eier (kun for verifisering)
  ownershipForm      String?  // Selveier, Aksje, Andel, etc.
  rightOfOccupancy   Boolean? @default(false) // Bruksrett
  buybackClause      Boolean? @default(false) // Tilbakekjøpsrett
  preemptionRight    Boolean? @default(false) // Forkjøpsrett
  restrictions       String?  @db.Text // Restriksjoner/servitutter
  
  // === SPESIELLE EIENDOMSTYPER ===
  // For fritidsboliger
  seasonalProperty   Boolean? @default(false)
  winterAccess       Boolean? @default(false)
  waterfront         Boolean? @default(false)
  
  // For næringseiendom
  commercialUse      Boolean? @default(false)
  mixedUse           Boolean? @default(false)
  businessType       String?  // Kontor, Lager, Butikk, etc.
  
  // For bofellesskap/kollektiv
  sharedLiving       Boolean? @default(false)
  privateRoom        Boolean? @default(false)
  sharedKitchen      Boolean? @default(false)
  sharedBathroom     Boolean? @default(false)
  
  // === METADATA ===
  kartverketUpdated  DateTime? // Når data sist ble hentet fra Kartverket
  dataQuality        DataQuality? // A-E kvalitetsvurdering
  verificationStatus VerificationStatus? // VERIFIED, PENDING, FAILED
  lastUpdated        DateTime? // Når eier/megler sist oppdaterte
  autoUpdated        Boolean? @default(false) // Om data er auto-hentet
  
  // === TIMESTAMPS ===
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  listing            Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([propertyType])
  @@index([ownershipType]) 
  @@index([municipalityNumber])
  @@index([energyRating])
  @@index([furnished])
  @@index([foreignCountry])
  @@map("property_specs")
}

model FlightBooking {
  id              String              @id @default(cuid())
  userId          String
  origin          String
  destination     String
  departureDate   DateTime
  returnDate      DateTime?
  passengers      Int                 @default(1)
  cabinClass      String              @default("ECONOMY")
  amadeusOfferId  String?
  flightOfferData String?             @db.LongText
  totalPrice      Decimal             @db.Decimal(10, 2)
  currency        String              @default("NOK")
  bookingRef      String?
  pnr             String?
  status          FlightBookingStatus @default(SEARCHING)
  bookingDate     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelers       FlightTraveler[]
  segments        FlightSegment[]

  @@index([userId], map: "flight_bookings_userId_fkey")
  @@map("flight_bookings")
}

model FlightTraveler {
  id              String        @id @default(cuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          String
  documentType    String
  documentNumber  String
  nationality     String
  email           String?
  phone           String?
  flightBookingId String
  createdAt       DateTime      @default(now())
  flightBooking   FlightBooking @relation(fields: [flightBookingId], references: [id], onDelete: Cascade)

  @@index([flightBookingId], map: "flight_travelers_flightBookingId_fkey")
  @@map("flight_travelers")
}

model FlightSegment {
  id               String        @id @default(cuid())
  carrierCode      String
  flightNumber     String
  departureAirport String
  arrivalAirport   String
  departureTime    DateTime
  arrivalTime      DateTime
  aircraftCode     String?
  duration         String?
  cabinClass       String
  fareBasis        String?
  flightBookingId  String
  segmentNumber    Int
  createdAt        DateTime      @default(now())
  flightBooking    FlightBooking @relation(fields: [flightBookingId], references: [id], onDelete: Cascade)

  @@index([flightBookingId], map: "flight_segments_flightBookingId_fkey")
  @@map("flight_segments")
}

model Airport {
  id        String   @id @default(cuid())
  iataCode  String   @unique
  icaoCode  String?
  name      String
  city      String
  country   String
  latitude  Float?
  longitude Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airports")
}

model Payment {
  id                    String          @id @default(cuid())
  stripePaymentIntentId String          @unique
  stripeChargeId        String?
  userId                String
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("NOK")
  description           String
  type                  PaymentType
  listingId             String?
  subscriptionId        String?
  status                PaymentStatus   @default(PENDING)
  metadata              String?         @db.LongText
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingPayment        ListingPayment?

  @@index([userId], map: "payments_userId_fkey")
  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  stripePriceId        String
  userId               String             @unique
  plan                 SubscriptionPlan
  status               SubscriptionStatus @default(ACTIVE)
  adsRemaining         Int                @default(0)
  adsPerMonth          Int
  pricePerMonth        Decimal            @db.Decimal(10, 2)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAt             DateTime?
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ListingPayment {
  id        String             @id @default(cuid())
  listingId String             @unique
  paymentId String             @unique
  type      ListingPaymentType
  amount    Decimal            @db.Decimal(10, 2)
  isPaid    Boolean            @default(false)
  paidAt    DateTime?
  createdAt DateTime           @default(now())
  listing   Listing            @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payment   Payment            @relation(fields: [paymentId], references: [id])

  @@map("listing_payments")
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  SOLD
  EXPIRED
  SUSPENDED
}

enum ListingType {
  FIXED_PRICE
  AUCTION
}

enum EstimationMethod {
  MANUAL_ADMIN
  BASIC_ALGORITHM
  MARKET_ANALYSIS
  ML_ALGORITHM
  EXTERNAL_API
}

enum AuctionStatus {
  PENDING
  ACTIVE
  ENDED
  SOLD
  CANCELLED
}

enum BidStatus {
  ACTIVE
  WITHDRAWN
  REJECTED
}

enum FlightBookingStatus {
  SEARCHING
  OFFER_SELECTED
  BOOKED
  TICKETED
  CANCELLED
  COMPLETED
}

enum PaymentType {
  LISTING_FEE
  SUBSCRIPTION
  FEATURED_AD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum SubscriptionPlan {
  // Privatpersoner utleie
  PRIVATE_RENTAL    // 99 kr/mnd - kun utleie
  
  // Meglere/Bedrifter eiendom
  BUSINESS_BASIC    // 499 kr/mnd - 5 annonser
  BUSINESS_STANDARD // 990 kr/mnd - 10 annonser  
  BUSINESS_PREMIUM  // 1990 kr/mnd - 50 annonser
  
  // Eksisterende (bil/torget)
  BASIC             // Grunnplan
  STANDARD          // Standardplan
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum ListingPaymentType {
  CAR_AD
  TORGET_AD
  PROPERTY_AD
}

// ================== EIENDOM ENUMS ==================

enum PropertyPurpose {
  SALE      // Til salgs
  RENT      // Til leie
  BOTH      // Både salg og leie
}

enum PropertyType {
  // Boliger
  APARTMENT         // Leilighet  
  HOUSE             // Enebolig
  TOWNHOUSE         // Rekkehus
  SEMI_DETACHED     // Tomannsbolig/Delt bolig
  TERRACED_HOUSE    // Rekkehus
  VILLA             // Villa
  MANSION           // Herskapshus
  PENTHOUSE         // Penthouse
  STUDIO            // Hybel/Studio
  ROOM              // Rom til leie
  
  // Fritidsboliger
  CABIN             // Hytte
  COTTAGE           // Sommerhus
  CHALET            // Chalet
  VACATION_HOME     // Feriebolig
  
  // Spesielle boformer
  SHARED_HOUSING    // Bofellesskap
  STUDENT_HOUSING   // Studentbolig
  SENIOR_HOUSING    // Seniorbolig
  ASSISTED_LIVING   // Omsorgsbolig
  
  // Næringseiendom
  OFFICE            // Kontor
  RETAIL            // Butikk/Handel
  WAREHOUSE         // Lager
  INDUSTRIAL        // Industri
  MIXED_USE         // Blandet bruk
  HOTEL             // Hotell
  RESTAURANT        // Restaurant
  
  // Tomter
  RESIDENTIAL_PLOT  // Boligtomt
  COMMERCIAL_PLOT   // Næringstomt
  AGRICULTURAL_LAND // Landbruksområde
  FOREST_LAND       // Skogsområde
  
  // Andre
  GARAGE            // Garasje
  PARKING_SPACE     // Parkeringsplass
  STORAGE           // Lager/Bod
  OTHER             // Annet
}

enum OwnershipType {
  FREEHOLD          // Selveier
  SHARE             // Aksje (borettslag)
  COOPERATIVE       // Andel (borettslag)
  LEASEHOLD         // Festeeiendom
  RIGHT_OF_USE      // Bruksrett
  RENTAL            // Leie
  TIMESHARE         // Deleie
  OTHER             // Annet
}

enum PropertyCondition {
  A_EXCELLENT       // A - Utmerket (som ny)
  B_VERY_GOOD       // B - Meget god
  C_GOOD            // C - God
  D_FAIR            // D - Brukbar
  E_POOR            // E - Dårlig
}

enum EnergyRating {
  A_DARK_GREEN      // A - Mørkegrønn
  B_GREEN           // B - Grønn  
  C_LIGHT_GREEN     // C - Lysegrønn
  D_YELLOW          // D - Gul
  E_ORANGE          // E - Oransje
  F_RED             // F - Rød
  G_DARK_RED        // G - Mørk rød
}

enum HeatingType {
  DISTRICT_HEATING  // Fjernvarme
  ELECTRIC          // Elektrisk
  HEAT_PUMP         // Varmepumpe
  GAS               // Gass
  OIL               // Olje
  WOOD              // Ved
  PELLETS           // Pellets
  SOLAR             // Solvarme
  GEOTHERMAL        // Geotermisk
  OTHER             // Annet
}

enum VentilationType {
  NATURAL           // Naturlig ventilasjon
  BALANCED          // Balansert ventilasjon
  EXHAUST           // Avtrekksventilasjon
  MECHANICAL        // Mekanisk ventilasjon
  NONE              // Ingen ventilasjon
}

enum WaterHeatingType {
  DISTRICT_HEATING  // Fjernvarme
  ELECTRIC          // Elektrisk
  HEAT_PUMP         // Varmepumpe
  GAS               // Gass
  OIL               // Olje
  SOLAR             // Solvarme
  OTHER             // Annet
}

enum BuildingMaterial {
  WOOD              // Tre
  CONCRETE          // Betong
  BRICK             // Mur/Tegl
  STEEL             // Stål
  STONE             // Stein
  MIXED             // Blandet
  OTHER             // Annet
}

enum RoofType {
  TILE              // Tegl
  SLATE             // Skifer
  METAL             // Blikk/Metall
  MEMBRANE          // Membran
  THATCH            // Strå/Torv
  CONCRETE          // Betong
  OTHER             // Annet
}

enum FoundationType {
  CONCRETE          // Betong
  STONE             // Naturstein
  PILES             // Pilarer
  SLAB              // Plate på mark
  CRAWL_SPACE       // Krypkjeller
  FULL_BASEMENT     // Full kjeller
  OTHER             // Annet
}

enum WallType {
  LOG               // Tømmer
  FRAME             // Bindingsverk
  BRICK             // Mur
  CONCRETE          // Betong
  PANEL             // Panel
  STONE             // Stein
  OTHER             // Annet
}

enum InsulationType {
  MINERAL_WOOL      // Mineralull
  CELLULOSE         // Cellulosa
  EPS               // EPS (flamingo)
  POLYURETHANE      // Polyuretan
  NATURAL           // Naturlige materialer
  OTHER             // Annet
}

enum WindowType {
  WOOD              // Tre
  ALUMINUM          // Aluminium
  PLASTIC           // Plast (PVC)
  WOOD_ALUMINUM     // Tre/aluminium
  STEEL             // Stål
  OTHER             // Annet
}

enum ParkingType {
  GARAGE            // Garasje
  CARPORT           // Carport
  COVERED           // Overdekket
  STREET            // Gateparkering
  PRIVATE_SPACE     // Privat plass
  NONE              // Ingen parkering
}

enum KitchenType {
  OPEN              // Åpent kjøkken
  SEPARATE          // Separat kjøkken
  KITCHENETTE       // Kjøkkenkrok
  NONE              // Ikke kjøkken
}

enum StoveType {
  ELECTRIC          // Elektrisk
  GAS               // Gass
  INDUCTION         // Induksjon
  WOOD              // Ved
  NONE              // Ingen komfyr
}

enum BathroomType {
  FULL              // Helstøpt bad
  TILED             // Flislagt
  SHOWER_ROOM       // Dusjrom
  WET_ROOM          // Våtrom
  HALF_BATH         // Toalett/servant
}

enum NoiseLevel {
  QUIET             // Stille
  MODERATE          // Moderat
  NOISY             // Støyete
}

enum FurnishingLevel {
  UNFURNISHED       // Umøblert
  PARTIALLY         // Delvis møblert
  FULLY             // Fullt møblert
}

enum DataQuality {
  A_EXCELLENT       // A - Utmerket datakvalitet
  B_GOOD            // B - God datakvalitet
  C_FAIR            // C - Brukbar datakvalitet
  D_POOR            // D - Dårlig datakvalitet
  E_UNKNOWN         // E - Ukjent kvalitet
}

enum VerificationStatus {
  VERIFIED          // Verifisert
  PENDING           // Venter på verifisering
  FAILED            // Verifisering feilet
  NOT_REQUIRED      // Ikke påkrevd
}

// --------- Favoritter ---------

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
  @@map("favorites")
}

// --------- Lagrede søk ---------

model SavedSearch {
  id         String   @id @default(cuid())
  userId     String
  name       String?
  queryJson  String   @db.LongText
  frequency  String   @default("daily")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

// --------- Audit log ---------

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  targetType  String
  targetId    String
  details     String?  @db.LongText
  createdAt   DateTime @default(now())
  actor       User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@index([actorId])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

// --------- Meldinger ---------

model Conversation {
  id            String   @id @default(cuid())
  listingId     String
  buyerId       String
  sellerId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  messages      Message[]
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer         User     @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  seller        User     @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([listingId, buyerId, sellerId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([listingId])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String        @db.Text
  status         MessageStatus @default(SENT)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

enum MessageStatus {
  SENT
  READ
}

// --------- Rapporter ---------

model Report {
  id          String       @id @default(cuid())
  listingId   String
  reporterId  String
  reason      ReportReason
  comment     String?
  status      ReportStatus @default(OPEN)
  handledById String?
  handledAt   DateTime?
  createdAt   DateTime     @default(now())
  listing     Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reporter    User         @relation("ReportsByUser", fields: [reporterId], references: [id], onDelete: Cascade)
  handledBy   User?        @relation("ReportsHandledBy", fields: [handledById], references: [id])

  @@index([listingId])
  @@index([reporterId])
  @@index([handledById])
  @@index([status])
  @@map("reports")
}

enum ReportReason {
  SCAM
  WRONG_CATEGORY
  OFFENSIVE
  SPAM
  OTHER
}

enum ReportStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  REJECTED
}

// --------- Vurderinger ---------

model Review {
  id          String   @id @default(cuid())
  revieweeId  String
  reviewerId  String
  listingId   String?
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsWritten", fields: [reviewerId], references: [id], onDelete: Cascade)
  listing     Listing? @relation(fields: [listingId], references: [id])

  @@unique([reviewerId, revieweeId, listingId])
  @@index([revieweeId])
  @@index([reviewerId])
  @@map("reviews")
}

// Fort gjort (sikker handel) - kun for Torget-kategorien
model SecureOrder {
  id                        String                     @id @default(cuid())
  listingId                 String
  buyerId                   String
  sellerId                  String
  stripePaymentIntentId     String?
  sellerStripeAccountId     String?                    // Selger sin Stripe Connect account
  itemPrice                 Float                      // Varepris i kroner
  kulbrukFee                Float                      // Kulbruk sin andel i kroner  
  totalAmount               Float                      // Total beløp i kroner
  sellerPayout              Float                      // Selger får utbetalt i kroner
  status                    SecureOrderStatus          @default(PAYMENT_PENDING)
  paidAt                    DateTime?                  // Når betaling ble bekreftet
  trackingNumber            String?
  trackingUrl               String?
  shippingMethod            String?                    // Posten, Bring, etc.
  shippedAt                 DateTime?
  deliveryDeadline          DateTime?                  // 7 dager fra ordre
  approvalDeadline          DateTime?                  // 3 dager etter levering
  approvedAt                DateTime?
  completedAt               DateTime?
  notes                     String?                    @db.Text
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  
  // Relasjoner
  listing                   Listing                    @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer                     User                       @relation("SecureOrdersBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller                    User                       @relation("SecureOrdersSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  disputes                  OrderDispute[]
  statusHistory             OrderStatusHistory[]

  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([deliveryDeadline])
  @@index([approvalDeadline])
  @@map("secure_orders")
}

enum SecureOrderStatus {
  PAYMENT_PENDING     // Venter på betaling fra kjøper
  PAYMENT_CONFIRMED   // Betaling bekreftet, venter på sending
  SHIPPED             // Sendt av selger
  DELIVERED           // Levert til kjøper
  APPROVED            // Godkjent av kjøper
  DISPUTED            // Klage fra kjøper
  COMPLETED           // Ferdig - penger overført
  CANCELLED           // Kansellert
  EXPIRED             // Utløpt (ikke sendt i tide)
}

model OrderDispute {
  id            String              @id @default(cuid())
  orderId       String
  initiatedBy   String              // buyerId eller sellerId
  reason        String              @db.Text
  description   String?             @db.Text
  status        OrderDisputeStatus  @default(OPEN)
  resolution    String?             @db.Text
  resolvedBy    String?             // Admin/moderator userId
  resolvedAt    DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relasjoner
  order         SecureOrder         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  initiator     User                @relation("OrderDisputesInitiated", fields: [initiatedBy], references: [id], onDelete: Cascade)
  resolver      User?               @relation("OrderDisputesResolved", fields: [resolvedBy], references: [id])

  @@index([orderId])
  @@index([initiatedBy])
  @@index([status])
  @@map("order_disputes")
}

enum OrderDisputeStatus {
  OPEN                // Åpen klage
  RESOLVED_BUYER      // Løst til kjøpers fordel
  RESOLVED_SELLER     // Løst til selgers fordel
  RESOLVED_PARTIAL    // Delvis refundering
}

model OrderStatusHistory {
  id        String            @id @default(cuid())
  orderId   String
  status    SecureOrderStatus
  note      String?           @db.Text
  createdBy String?           // Hvem som endret status
  createdAt DateTime          @default(now())
  
  // Relasjoner
  order     SecureOrder       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User?             @relation("OrderStatusUpdates", fields: [createdBy], references: [id])

  @@index([orderId])
  @@map("order_status_history")
}

// Stripe Connect kontoer for selgere
model SellerStripeAccount {
  id                    String   @id @default(cuid())
  userId                String   @unique
  stripeAccountId       String   @unique
  stripeAccountStatus   String   // 'pending', 'enabled', 'disabled'
  onboardingCompleted   Boolean  @default(false)
  onboardingUrl         String?
  payoutsEnabled        Boolean  @default(false)
  chargesEnabled        Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relasjon
  user                  User     @relation("SellerStripeAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeAccountId])
  @@map("seller_stripe_accounts")
}
