generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  firstName      String?
  lastName       String?
  phone          String?
  location       String?
  avatar         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  companyLogo    String?
  companyName    String?
  orgNumber      String?
  role           String          @default("customer")
  website        String?
  listings       Listing[]
  bids           Bid[]
  flightBookings FlightBooking[]
  payments       Payment[]
  subscription   Subscription?
  accounts       Account[]
  sessions       Session[]
  // Relasjoner for meldinger/vurderinger
  conversationsAsBuyer  Conversation[] @relation("BuyerConversations")
  conversationsAsSeller Conversation[] @relation("SellerConversations")
  messages              Message[]
  reviewsWritten        Review[]       @relation("ReviewsWritten")
  reviewsReceived       Review[]       @relation("ReviewsReceived")
  reportsReported       Report[]       @relation("ReportsByUser")
  reportsHandled        Report[]       @relation("ReportsHandledBy")
  favorites             Favorite[]
  savedSearches         SavedSearch[]
  auditLogs             AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  listings    Listing[]

  @@map("categories")
}

model Listing {
  id                 String           @id @default(cuid())
  shortCode          String?          @unique
  title              String
  description        String           @db.Text
  price              Decimal          @db.Decimal(10, 2)
  location           String
  showAddress        Boolean          @default(false)
  status             ListingStatus    @default(PENDING)
  isActive           Boolean          @default(true)
  views              Int              @default(0)
  isFeatured         Boolean          @default(false)
  contactEmail       String?
  contactPhone       String?
  contactName        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  publishedAt        DateTime?
  expiresAt          DateTime?
  soldAt             DateTime?
  userId             String
  categoryId         String
  condition          String?
  listingType        ListingType      @default(FIXED_PRICE)
  mileage            Int?
  registrationNumber String?
  reservePrice       Decimal?         @db.Decimal(10, 2)
  suggestedPrice     Decimal?         @db.Decimal(10, 2)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category           Category         @relation(fields: [categoryId], references: [id])
  images             Image[]
  vehicleSpec        VehicleSpec?
  priceEstimation    PriceEstimation?
  auction            Auction?
  bids               Bid[]
  listingPayment     ListingPayment?
  // Relasjoner for meldinger/rapporter/vurderinger
  conversations      Conversation[]
  reports            Report[]
  reviews            Review[]
  favorites          Favorite[]

  @@index([categoryId], map: "listings_categoryId_fkey")
  @@index([userId], map: "listings_userId_fkey")
  @@index([categoryId, status, isActive, expiresAt])
  @@index([status, isActive, expiresAt])
  @@fulltext([title])
  @@map("listings")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId], map: "images_listingId_fkey")
  @@map("images")
}

model PriceEstimation {
  id             String           @id @default(cuid())
  listingId      String           @unique
  make           String?
  model          String?
  year           Int?
  fuelType       String?
  transmission   String?
  estimatedPrice Decimal?         @db.Decimal(10, 2)
  priceRange     String?          @db.LongText
  method         EstimationMethod
  confidence     String
  factors        String?          @db.LongText
  disclaimer     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("price_estimations")
}

model Auction {
  id             String        @id @default(cuid())
  listingId      String        @unique
  startTime      DateTime      @default(now())
  endTime        DateTime
  reservePrice   Decimal?      @db.Decimal(10, 2)
  currentHighBid Decimal?      @db.Decimal(10, 2)
  status         AuctionStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  listing        Listing       @relation(fields: [listingId], references: [id])
  bids           Bid[]

  @@map("auctions")
}

model Bid {
  id        String    @id @default(cuid())
  auctionId String
  listingId String
  bidderId  String
  amount    Decimal   @db.Decimal(10, 2)
  message   String?
  status    BidStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auction   Auction   @relation(fields: [auctionId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])
  bidder    User      @relation(fields: [bidderId], references: [id])

  @@index([auctionId, amount])
  @@index([listingId])
  @@index([bidderId])
  @@map("bids")
}

model VehicleSpec {
  id                 String    @id @default(cuid())
  registrationNumber String?
  make               String?
  model              String?
  variant            String?
  year               Int?
  fuelType           String?
  transmission       String?
  color              String?
  power              Int?
  co2Emission        Int?
  mileage            Int?
  nextInspection     DateTime?
  insurance          String?
  accidents          Boolean?
  serviceHistory     String?   @db.Text
  modifications      String?   @db.Text
  additionalEquipment Json?
  
  // Utvidede Vegvesen-felt for full spesifikasjon
  bodyType           String?   // Karosseri (Sedan, SUV, osv)
  engineSize         Float?    // Slagvolum i liter
  cylinderCount      Int?      // Antall sylindre
  maxSpeed           Int?      // Toppfart km/t
  length             Int?      // Lengde i cm
  width              Int?      // Bredde i cm
  height             Int?      // Høyde i cm
  weight             Int?      // Egenvekt i kg
  maxWeight          Int?      // Totalvekt i kg
  payload            Int?      // Nyttelast i kg
  roofLoad           Int?      // Taklast i kg
  trailerWeightBraked    Int?  // Tilhengervekt med brems i kg
  trailerWeightUnbraked  Int?  // Tilhengervekt uten brems i kg
  seats              Int?      // Antall seter
  frontSeats         Int?      // Antall forseter
  doors              Int?      // Antall dører
  trunkCapacity      Int?      // Bagasjerom i liter
  euroClass          String?   // Euro-klasse (Euro 5, Euro 6, osv)
  wheelDrive         String?   // Hjuldrift (Forhjul, Bakhjul, Firehjul)
  vin                String?   // Chassis nummer
  firstRegistrationDate DateTime? // 1. gang registrert
  lastInspection     DateTime? // Sist EU-godkjent
  registrationStatus String?   // Status i motorvognregisteret
  vehicleGroup       String?   // Kjøretøygruppe
  technicalCode      String?   // Teknisk kode
  remarks            Json?     // Merknader fra Vegvesen som array
  
  // Drivstoff-forbruk
  fuelConsumptionCombined Float? // Blandet kjøring L/100km
  fuelConsumptionCity     Float? // Bykjøring L/100km  
  fuelConsumptionHighway  Float? // Landeveiskjøring L/100km
  
  // Dekk og felg
  tireSpecs          Json?     // Dekk-spesifikasjoner som JSON array
  
  // Sikkerhet
  abs                Boolean?  // ABS
  airbags            Boolean?  // Airbags

  // Omregistreringsavgift (fra Skatteetaten)
  omregistreringsavgift    Int?      // Beløp i hele kroner
  omregAvgiftDato          DateTime? // Dato avgiften gjelder for
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  listingId          String    @unique
  listing            Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("vehicle_specs")
}

model FlightBooking {
  id              String              @id @default(cuid())
  userId          String
  origin          String
  destination     String
  departureDate   DateTime
  returnDate      DateTime?
  passengers      Int                 @default(1)
  cabinClass      String              @default("ECONOMY")
  amadeusOfferId  String?
  flightOfferData String?             @db.LongText
  totalPrice      Decimal             @db.Decimal(10, 2)
  currency        String              @default("NOK")
  bookingRef      String?
  pnr             String?
  status          FlightBookingStatus @default(SEARCHING)
  bookingDate     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelers       FlightTraveler[]
  segments        FlightSegment[]

  @@index([userId], map: "flight_bookings_userId_fkey")
  @@map("flight_bookings")
}

model FlightTraveler {
  id              String        @id @default(cuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          String
  documentType    String
  documentNumber  String
  nationality     String
  email           String?
  phone           String?
  flightBookingId String
  createdAt       DateTime      @default(now())
  flightBooking   FlightBooking @relation(fields: [flightBookingId], references: [id], onDelete: Cascade)

  @@index([flightBookingId], map: "flight_travelers_flightBookingId_fkey")
  @@map("flight_travelers")
}

model FlightSegment {
  id               String        @id @default(cuid())
  carrierCode      String
  flightNumber     String
  departureAirport String
  arrivalAirport   String
  departureTime    DateTime
  arrivalTime      DateTime
  aircraftCode     String?
  duration         String?
  cabinClass       String
  fareBasis        String?
  flightBookingId  String
  segmentNumber    Int
  createdAt        DateTime      @default(now())
  flightBooking    FlightBooking @relation(fields: [flightBookingId], references: [id], onDelete: Cascade)

  @@index([flightBookingId], map: "flight_segments_flightBookingId_fkey")
  @@map("flight_segments")
}

model Airport {
  id        String   @id @default(cuid())
  iataCode  String   @unique
  icaoCode  String?
  name      String
  city      String
  country   String
  latitude  Float?
  longitude Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airports")
}

model Payment {
  id                    String          @id @default(cuid())
  stripePaymentIntentId String          @unique
  stripeChargeId        String?
  userId                String
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("NOK")
  description           String
  type                  PaymentType
  listingId             String?
  subscriptionId        String?
  status                PaymentStatus   @default(PENDING)
  metadata              String?         @db.LongText
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingPayment        ListingPayment?

  @@index([userId], map: "payments_userId_fkey")
  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  stripePriceId        String
  userId               String             @unique
  plan                 SubscriptionPlan
  status               SubscriptionStatus @default(ACTIVE)
  adsRemaining         Int                @default(0)
  adsPerMonth          Int
  pricePerMonth        Decimal            @db.Decimal(10, 2)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAt             DateTime?
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ListingPayment {
  id        String             @id @default(cuid())
  listingId String             @unique
  paymentId String             @unique
  type      ListingPaymentType
  amount    Decimal            @db.Decimal(10, 2)
  isPaid    Boolean            @default(false)
  paidAt    DateTime?
  createdAt DateTime           @default(now())
  listing   Listing            @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payment   Payment            @relation(fields: [paymentId], references: [id])

  @@map("listing_payments")
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  SOLD
  EXPIRED
  SUSPENDED
}

enum ListingType {
  FIXED_PRICE
  AUCTION
}

enum EstimationMethod {
  MANUAL_ADMIN
  BASIC_ALGORITHM
  MARKET_ANALYSIS
  ML_ALGORITHM
  EXTERNAL_API
}

enum AuctionStatus {
  PENDING
  ACTIVE
  ENDED
  SOLD
  CANCELLED
}

enum BidStatus {
  ACTIVE
  WITHDRAWN
  REJECTED
}

enum FlightBookingStatus {
  SEARCHING
  OFFER_SELECTED
  BOOKED
  TICKETED
  CANCELLED
  COMPLETED
}

enum PaymentType {
  LISTING_FEE
  SUBSCRIPTION
  FEATURED_AD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum SubscriptionPlan {
  BASIC
  STANDARD
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum ListingPaymentType {
  CAR_AD
  TORGET_AD
}

// --------- Favoritter ---------

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
  @@map("favorites")
}

// --------- Lagrede søk ---------

model SavedSearch {
  id         String   @id @default(cuid())
  userId     String
  name       String?
  queryJson  String   @db.LongText
  frequency  String   @default("daily")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

// --------- Audit log ---------

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  action      String
  targetType  String
  targetId    String
  details     String?  @db.LongText
  createdAt   DateTime @default(now())
  actor       User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@index([actorId])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

// --------- Meldinger ---------

model Conversation {
  id            String   @id @default(cuid())
  listingId     String
  buyerId       String
  sellerId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  messages      Message[]
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyer         User     @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  seller        User     @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([listingId, buyerId, sellerId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([listingId])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String        @db.Text
  status         MessageStatus @default(SENT)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

enum MessageStatus {
  SENT
  READ
}

// --------- Rapporter ---------

model Report {
  id          String       @id @default(cuid())
  listingId   String
  reporterId  String
  reason      ReportReason
  comment     String?
  status      ReportStatus @default(OPEN)
  handledById String?
  handledAt   DateTime?
  createdAt   DateTime     @default(now())
  listing     Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reporter    User         @relation("ReportsByUser", fields: [reporterId], references: [id], onDelete: Cascade)
  handledBy   User?        @relation("ReportsHandledBy", fields: [handledById], references: [id])

  @@index([listingId])
  @@index([reporterId])
  @@index([handledById])
  @@index([status])
  @@map("reports")
}

enum ReportReason {
  SCAM
  WRONG_CATEGORY
  OFFENSIVE
  SPAM
  OTHER
}

enum ReportStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  REJECTED
}

// --------- Vurderinger ---------

model Review {
  id          String   @id @default(cuid())
  revieweeId  String
  reviewerId  String
  listingId   String?
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsWritten", fields: [reviewerId], references: [id], onDelete: Cascade)
  listing     Listing? @relation(fields: [listingId], references: [id])

  @@unique([reviewerId, revieweeId, listingId])
  @@index([revieweeId])
  @@index([reviewerId])
  @@map("reviews")
}
